% =======================================================================
% ReStructure of The Front
% 02 -> Adding & Deleting Points
% 03 -> Reordening
% A -> Interpolacion Lineal, B-> Legendre
% =======================================================================

function [xFront,yFront,xmapFront,ymapFront]...
    =ReStructureoftheFront03_B(NFront,xFront,yFront,...
    xmapFront,ymapFront,FMx,FMy,X1,X2,Y1,Y2)

% -----------------------------------------------------------------------
xFrontLast=xFront; yFrontLast=yFront;
xmapFrontLast=xmapFront; ymapFrontLast=ymapFront;

% Total Distance & New spacing ------------------------------------------
DistToT=0;
for il=2:NFront+1
    DistToT=DistToT+...
        ((xFront(il)-xFront(il-1))^2+(yFront(il)-yFront(il-1))^2)^0.5;
end
Delta=DistToT/NFront;
% -----------------------------------------------------------------------

% New Point Distribution ------------------------------------------------ 
DistFrontLast1=0; DistFrontLast0=DistFrontLast1; il0=1;
for il=1:NFront
    DeltaiFront=(il-1)*Delta; Asigil=0;
    
    while(Asigil==0)
        if (DeltaiFront>=DistFrontLast0)&&(DeltaiFront<DistFrontLast1)
            dist0=(DeltaiFront-DistFrontLast0)/(DistFrontLast1-DistFrontLast0);
            % A 3er Order Legendre Polinomial [0,1,2,3]
            u=dist0+1;
            if (il0>2)&&(il0<NFront+2)
                xmapFront(il)=...
                    -1/6*(u-1)*(u-2)*(u-3)*xmapFrontLast(il0-2)+...
                    0.5*u*(u-2)*(u-3)*xmapFrontLast(il0-1)+...
                    -0.5*u*(u-1)*(u-3)*xmapFrontLast(il0)+...
                    1/6*u*(u-1)*(u-2)*xmapFrontLast(il0+1);
                ymapFront(il)=...
                    -1/6*(u-1)*(u-2)*(u-3)*ymapFrontLast(il0-2)+...
                    0.5*u*(u-2)*(u-3)*ymapFrontLast(il0-1)+...
                    -0.5*u*(u-1)*(u-3)*ymapFrontLast(il0)+...
                    1/6*u*(u-1)*(u-2)*ymapFrontLast(il0+1);
            elseif il0==NFront+2
                xmapFront(il)=...
                    -1/6*(u-1)*(u-2)*(u-3)*xmapFrontLast(il0-2)+...
                    0.5*u*(u-2)*(u-3)*xmapFrontLast(il0-1)+...
                    -0.5*u*(u-1)*(u-3)*xmapFrontLast(il0)+...
                    1/6*u*(u-1)*(u-2)*xmapFrontLast(3);
                ymapFront(il)=...
                    -1/6*(u-1)*(u-2)*(u-3)*ymapFrontLast(il0-2)+...
                    0.5*u*(u-2)*(u-3)*ymapFrontLast(il0-1)+...
                    -0.5*u*(u-1)*(u-3)*ymapFrontLast(il0)+...
                    1/6*u*(u-1)*(u-2)*ymapFrontLast(3);
            elseif il0==2
                xmapFront(il)=...
                    -1/6*(u-1)*(u-2)*(u-3)*xmapFrontLast(NFront)+...
                    0.5*u*(u-2)*(u-3)*xmapFrontLast(il0-1)+...
                    -0.5*u*(u-1)*(u-3)*xmapFrontLast(il0)+...
                    1/6*u*(u-1)*(u-2)*xmapFrontLast(il0+1);
                ymapFront(il)=...
                    -1/6*(u-1)*(u-2)*(u-3)*ymapFrontLast(NFront)+...
                    0.5*u*(u-2)*(u-3)*ymapFrontLast(il0-1)+...
                    -0.5*u*(u-1)*(u-3)*ymapFrontLast(il0)+...
                    1/6*u*(u-1)*(u-2)*ymapFrontLast(il0+1);
            elseif il0==1
                xmapFront(il)=...
                    -1/6*(u-1)*(u-2)*(u-3)*xmapFrontLast(NFront-1)+...
                    0.5*u*(u-2)*(u-3)*xmapFrontLast(NFront)+...
                    -0.5*u*(u-1)*(u-3)*xmapFrontLast(il0)+...
                    1/6*u*(u-1)*(u-2)*xmapFrontLast(il0+1);
                ymapFront(il)=...
                    -1/6*(u-1)*(u-2)*(u-3)*ymapFrontLast(NFront-1)+...
                    0.5*u*(u-2)*(u-3)*ymapFrontLast(NFront)+...
                    -0.5*u*(u-1)*(u-3)*ymapFrontLast(il0)+...
                    1/6*u*(u-1)*(u-2)*ymapFrontLast(il0+1);
            end
            xFront(il)=X1+(X2-X1)*FMx(xmapFront(il)); 
            yFront(il)=Y1+(Y2-Y1)*FMy(ymapFront(il));
            
            Asigil=1;
        else
            il0=il0+1; % Go to the next points
            DistFrontLast0=DistFrontLast1;
            DistFrontLast1=DistFrontLast1+...
                ((xFrontLast(il0)-xFrontLast(il0-1))^2+...
                (yFrontLast(il0)-yFrontLast(il0-1))^2)^0.5;
        end
    end
  
%     DistFrontLast1=0;
%     for il0=3:NFront0+2
%         DistFrontLast0=DistFrontLast1;
%         DistFrontLast1=DistFrontLast1+...
%             ((xFrontLast(il0)-xFrontLast(il0-1))^2+...
%             (yFrontLast(il0)-yFrontLast(il0-1))^2)^0.5;
%         if (DeltaiFront>=DistFrontLast0)&&(DeltaiFront<DistFrontLast1)
%             dist0=(DeltaiFront-DistFrontLast0)/(DistFrontLast1-DistFrontLast10);
%             xmapFront(il)=(1-dist0)*xmapFrontLast(il0-1)+...
%                 dist0*xmapFrontLast(il0);
%             ymapFront(il)=(1-dist0)*ymapFrontLast(il0-1)+...
%                 dist0*xmapFrontLast(il0);
%             xFront(il)=FMx(xmapFront(il)); yFront(il)=FMy(ymapFront(il));
%         end
%     end
end
% -----------------------------------------------------------------------

% xmapFront(1)=xmapFront(NFront+1); ymapFront(1)=ymapFront(NFront+1);
% xFront(1)=xFront(NFront+1); yFront(1)=yFront(NFront+1);
xmapFront(NFront+1)=xmapFront(1); ymapFront(NFront+1)=ymapFront(1);
xFront(NFront+1)=xFront(1); yFront(NFront+1)=yFront(1);
xmapFront(NFront+2)=xmapFront(2); ymapFront(NFront+2)=ymapFront(2);
xFront(NFront+2)=xFront(2); yFront(NFront+2)=yFront(2);
% -----------------------------------------------------------------------
% =======================================================================

% Cosas de comprobacion -------------------------------------------------

% figure; plot(xFront,yFront,'d',xFrontLast,yFrontLast,'o'); legend('New','old')
% 
% Distances=((xFront(2:end)-xFront(1:end-1)).^2+...
%     (yFront(2:end)-yFront(1:end-1)).^2).^0.5;
% 
% Distances0=((xFront(2:end)-xFront(1:end-1)).^2+...
%     (yFront(2:end)-yFront(1:end-1)).^2).^0.5;
% 
% figure; plot(1:NFront+2-1,Distances,'d',1:NFront0+2-1,Distances0,'o',...
%     1:NFront,FrontDistMax*ones(1,NFront),1:NFront,FrontDistMin*ones(1,NFront))
% legend('New','old','Max','Min')
