% =======================================================================
% ReStructure of The Front
% 02 -> Adding & Deleting Points
% 03 -> Reordening
% A -> Interpolacion Lineal, B-> Legendre
% =======================================================================

function [xFront,yFront,xmapFront,ymapFront]...
    =ReStructureoftheFront03_B(NFront,xFront,yFront,...
    xmapFront,ymapFront,FMx,FMy,X1,X2,Y1,Y2,Lx)


% -----------------------------------------------------------------------
xFrontLast{1}=xFront{1}; yFrontLast{1}=yFront{1};
xmapFrontLast{1}=xmapFront{1}; ymapFrontLast{1}=ymapFront{1};

xFrontLast{2}=xFront{2}; yFrontLast{2}=yFront{2};
xmapFrontLast{2}=xmapFront{2}; ymapFrontLast{2}=ymapFront{2};
% -----------------------------------------------------------------------

for i=1:2
% Total Distance & New spacing ------------------------------------------
DistToT=0;
for il=3:NFront{i}+1
    DistToT=DistToT+...
        ((xFront{i}(il)-xFront{i}(il-1))^2+(yFront{i}(il)-yFront{i}(il-1))^2)^0.5;
end
Delta=DistToT/(NFront{i}-1);
% -----------------------------------------------------------------------

% New Point Distribution  -----------------------------------------------
DistFrontLast1=0; DistFrontLast0=DistFrontLast1; il0=2;
for il=3:NFront{i}
    DeltaiFront=(il-2)*Delta; Asigil=0;
    
    while(Asigil==0)
        if (DeltaiFront>=DistFrontLast0)&&(DeltaiFront<DistFrontLast1)
            dist0=(DeltaiFront-DistFrontLast0)/(DistFrontLast1-DistFrontLast0);
            % A 3er Order Legendre Polinomial [0,1,2,3]
            u=dist0+1;
            if (il0>2)&&(il0<NFront{i}+2)
                xmapFront{i}(il)=...
                -1/6*(u-1)*(u-2)*(u-3)*xmapFrontLast{i}(il0-2)+...
                0.5*u*(u-2)*(u-3)*xmapFrontLast{i}(il0-1)+...
                -0.5*u*(u-1)*(u-3)*xmapFrontLast{i}(il0)+...
                1/6*u*(u-1)*(u-2)*xmapFrontLast{i}(il0+1);
                ymapFront{i}(il)=...
                    -1/6*(u-1)*(u-2)*(u-3)*ymapFrontLast{i}(il0-2)+...
                    0.5*u*(u-2)*(u-3)*ymapFrontLast{i}(il0-1)+...
                    -0.5*u*(u-1)*(u-3)*ymapFrontLast{i}(il0)+...
                    1/6*u*(u-1)*(u-2)*ymapFrontLast{i}(il0+1);
            elseif il0==NFront{i}+2
                xmapFront{i}(il)=...
                    -1/6*(u-1)*(u-2)*(u-3)*xmapFrontLast{i}(il0-2)+...
                    0.5*u*(u-2)*(u-3)*xmapFrontLast{i}(il0-1)+...
                    -0.5*u*(u-1)*(u-3)*xmapFrontLast{i}(il0)+...
                    1/6*u*(u-1)*(u-2)*xmapFrontLast{i}(3);
                ymapFront{i}(il)=...
                    -1/6*(u-1)*(u-2)*(u-3)*ymapFrontLast{i}(il0-2)+...
                    0.5*u*(u-2)*(u-3)*ymapFrontLast{i}(il0-1)+...
                    -0.5*u*(u-1)*(u-3)*ymapFrontLast{i}(il0)+...
                    1/6*u*(u-1)*(u-2)*ymapFrontLast{i}(3);
            elseif il0==2
                xmapFront{i}(il)=...
                    -1/6*(u-1)*(u-2)*(u-3)*xmapFrontLast{i}(NFront)+...
                    0.5*u*(u-2)*(u-3)*xmapFrontLast{i}(il0-1)+...
                    -0.5*u*(u-1)*(u-3)*xmapFrontLast{i}(il0)+...
                    1/6*u*(u-1)*(u-2)*xmapFrontLast{i}(il0+1);
                ymapFront{i}(il)=...
                    -1/6*(u-1)*(u-2)*(u-3)*ymapFrontLast{i}(NFront{i})+...
                    0.5*u*(u-2)*(u-3)*ymapFrontLast{i}(il0-1)+...
                    -0.5*u*(u-1)*(u-3)*ymapFrontLast{i}(il0)+...
                    1/6*u*(u-1)*(u-2)*ymapFrontLast{i}(il0+1);
            elseif il0==1
                xmapFront{i}(il)=...
                    -1/6*(u-1)*(u-2)*(u-3)*xmapFrontLast{i}(NFront-1)+...
                    0.5*u*(u-2)*(u-3)*xmapFrontLast{i}(NFront)+...
                    -0.5*u*(u-1)*(u-3)*xmapFrontLast{i}(il0)+...
                    1/6*u*(u-1)*(u-2)*xmapFrontLast{i}(il0+1);
                ymapFront{i}(il)=...
                    -1/6*(u-1)*(u-2)*(u-3)*ymapFrontLast{i}(NFront{i}-1)+...
                    0.5*u*(u-2)*(u-3)*ymapFrontLast{i}(NFront{i})+...
                    -0.5*u*(u-1)*(u-3)*ymapFrontLast{i}(il0)+...
                    1/6*u*(u-1)*(u-2)*ymapFrontLast{i}(il0+1);
            end
            xFront{i}(il)=X1+(X2-X1)*FMx(xmapFront{i}(il)); 
            yFront{i}(il)=Y1+(Y2-Y1)*FMy(ymapFront{i}(il));
            
            Asigil=1;
        else
            il0=il0+1; % Go to the next points
            DistFrontLast0=DistFrontLast1;
            DistFrontLast1=DistFrontLast1+...
                ((xFrontLast{i}(il0)-xFrontLast{i}(il0-1))^2+...
                (yFrontLast{i}(il0)-yFrontLast{i}(il0-1))^2)^0.5;
        end
    end
  
%     DistFrontLast1=0;
%     for il0=3:NFront0+2
%         DistFrontLast0=DistFrontLast1;
%         DistFrontLast1=DistFrontLast1+...
%             ((xFrontLast(il0)-xFrontLast(il0-1))^2+...
%             (yFrontLast(il0)-yFrontLast(il0-1))^2)^0.5;
%         if (DeltaiFront>=DistFrontLast0)&&(DeltaiFront<DistFrontLast1)
%             dist0=(DeltaiFront-DistFrontLast0)/(DistFrontLast1-DistFrontLast10);
%             xmapFront(il)=(1-dist0)*xmapFrontLast(il0-1)+...
%                 dist0*xmapFrontLast(il0);
%             ymapFront(il)=(1-dist0)*ymapFrontLast(il0-1)+...
%                 dist0*xmapFrontLast(il0);
%             xFront(il)=FMx(xmapFront(il)); yFront(il)=FMy(ymapFront(il));
%         end
%     end
end
% -----------------------------------------------------------------------
xFront{1}(1)=-xFront{1}(3);
xFront{1}(NFront{1}+2)=xFront{1}(NFront{1}+1) + ...
    ( xFront{1}(NFront{1}+1) - xFront{1}(NFront{1}) ) ;
yFront{1}(1)=yFront{1}(3);  yFront{1}(NFront{1}+2)=yFront{1}(NFront{1}+1);

xmapFront{1}(1)=-xmapFront{1}(3);
xmapFront{1}(NFront{1}+2)=xmapFront{1}(NFront{1}+1) + ...
    ( xmapFront{1}(NFront{1}+1) - xmapFront{1}(NFront{1}) ) ;
ymapFront{1}(1)=ymapFront{1}(3);  ymapFront{1}(NFront{1}+2)=ymapFront{1}(NFront{1}+1);

xFront{2}(1) = -xFront{2}(3); yFront{2}(1) = yFront{2}(3);
xFront{2}(NFront{2}+2) = -xFront{2}(NFront{2});
yFront{2}(NFront{2}+2) = yFront{2}(NFront{2});

xmapFront{2}(1) = -xmapFront{2}(3); ymapFront{2}(1) = ymapFront{2}(3);
xmapFront{2}(NFront{2}+2) = -xmapFront{2}(NFront{2});
ymapFront{2}(NFront{2}+2) = ymapFront{2}(NFront{2});
% -----------------------------------------------------------------------
end
% =======================================================================

% Cosas de comprobacion -------------------------------------------------

% figure; plot(xFront,yFront,'d',xFrontLast,yFrontLast,'o'); legend('New','old')
% 
% Distances=((xFront(2:end)-xFront(1:end-1)).^2+...
%     (yFront(2:end)-yFront(1:end-1)).^2).^0.5;
% 
% Distances0=((xFront(2:end)-xFront(1:end-1)).^2+...
%     (yFront(2:end)-yFront(1:end-1)).^2).^0.5;
% 
% figure; plot(1:NFront+2-1,Distances,'d',1:NFront0+2-1,Distances0,'o',...
%     1:NFront,FrontDistMax*ones(1,NFront),1:NFront,FrontDistMin*ones(1,NFront))
% legend('New','old','Max','Min')
